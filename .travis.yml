language: node_js
node_js: 12
mono:
  - latest

jobs:
  include:
    - os: linux
      dist: bionic
    - os: osx
      osx_image: xcode10

env:
  global:
    - secure: "B8TgHeoMvTv59qIbpEfc0xF83FRZ+PakNJLfwQQkgTcL9XN18/pXf1r8AU0dO1bnsmiN0LB9TTvQEjifa1dbZ1FtyaM8q5y3yENIFYPyydoOd4qrn80udLfFP5J4RrBK9vRAgn7y6Z+e1mTRTedcQMggRW5wXeSOmkQ2IILq4sHF5U4pjyLr1P8UV5mLVscZERATiSWDpcnD57eY/423NsyKpxFSbvj2HovUJtc/IOurzTNi3LYaXj5b6MktQlwsa2pWSwANXeJC31VzPOYp5eskpasPagDka4p2WR7z3FW8RnQCjVp45tQys/9hTd2ftyK6OVk+rC4Wq2kOxTNVAjN9qWD+MaQQDABGRefv5mNGyordn/tc8qt8fM643EWdtGC1/s22xZx0Rc7o/R7rHahAJE44rkRQ+9jlhh7rApArtgyUP78qmE1iROB3WSsHLkN2aorb74DTlKMAm2JEDbiNW+oKPds98YoABpbIyGA144pAyOjstqeYpHTRorWKGTfKa1+RkkfgBYk2yx3fnrIk7F/2wKN8kQ9QlGGx1bsJMVfgSmEp4ToP8zhQWXkkwCzkwdzv7xwFf83XbsBONxAqFl67aODcRoIM7FjRYF7PQbB/FUyz5ZachAJP+IDBBNjZzUO87MRZuVeDsD3Iv1dVPNNs3CAyc9S9lDvnEWo="
    - CSC_IDENTITY_AUTO_DISCOVERY=false
    - YARN_GPG=no # otherwise Yarn starts a GPG daemon which prevents builds from finishing on Windows

cache:
  yarn: true
  directories:
    - "node_modules"
    - "packages/core/node_modules"
    - "packages/desktop/node_modules"
    - "packages/erc20/node_modules"
    - "packages/services/node_modules"
    - "packages/ui/node_modules"

# Need for gitversion
git:
  depth: false

before_install:
  # GitVersion
  - echo Installing GitVersion...
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install mono; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt install curl; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export GITVERSION_NAME="gitversion-ubuntu.18.04-x64-5.3.3.tar.gz"; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export GITVERSION_NAME="gitversion-osx-x64-5.3.3.tar.gz"; fi

  # wget https://github.com/GitTools/GitVersion/releases/download/v4.0.0/GitVersion-bin-net40-v4.0.0.zip
  - wget https://github.com/GitTools/GitVersion/releases/download/5.3.3/$GITVERSION_NAME
  # unzip GitVersion-bin-net40-v4.0.0.zip -d GitVersionBin
  - mkdir GitVersionBin
  - tar -zxvf $GITVERSION_NAME -C GitVersionBin
  - echo "#!/bin/bash" > gitversion
  - echo 'GitVersionBin/gitversion "$@"' >> gitversion
  - chmod 755 gitversion
  - ./gitversion /version
  # Janus
  - echo Janus...
  - curl -sL https://raw.githubusercontent.com/ETCDEVTeam/janus/master/get.sh | bash
  - export PATH=$PATH:$PWD/janusbin
  # Warm up Yarn
  - echo Installing dependencies
  - npm install -g node-gyp license-checker
  - npm install -g codecov yarn lerna
  - npm install -g typescript

install:
  - export DISPLAY=':99.0'
  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
  - yarn install

before_script:
  - tsc -V
  - ./gitversion

script:
  - openssl aes-256-cbc -k "$GCP_PASSWD" -in gcloud-travis.json.enc -out .gcloud.json -d
  - ./gitversion > packages/desktop/gitversion.json
  - export APP_VERSION_GIT_TAG="$(./gitversion /showvariable FullSemVer)-$(./gitversion /showvariable ShortSha)"
  - echo "Building app version $APP_VERSION_GIT_TAG"
  - if [[ $(license-checker --production --exclude '(GPL-2.0 OR MIT)' | grep GPL) ]]; then license-checker --production | grep -C 1 GPL && false; fi
  - yarn build
  - yarn test:coverage
  # - yarn lint:ts
  - travis_wait 30 yarn build:dist
after_success:
  # Show dist directory contents after a successful build.
  - ls -l ./packages/desktop/dist/
  # Set up GCP deployment
  - openssl aes-256-cbc -k "$GCP_PASSWD" -in gcloud-travis.json.enc -out .gcloud.json -d

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - build-essential
    - libudev-dev
    - libusb-1.0-0
    - libusb-1.0-0-dev
    - mono-complete
    - libcurl3
    - xvfb
deploy:
  - provider: script
    script: ./gcloud-deploy.sh
    skip_cleanup: true
    on:
      branch: master

  - provider: script
    script: ./gcloud-deploy.sh
    skip_cleanup: true
    on:
      tags: true
